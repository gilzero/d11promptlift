"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = __importDefault(require("../lib/log"));
const constants_1 = require("../lib/constants");
const getGitRepoNameFromUrl_1 = __importDefault(require("../util/getGitRepoNameFromUrl"));
const getEmulsifyConfig_1 = __importDefault(require("../util/project/getEmulsifyConfig"));
const getJsonFromCachedFile_1 = __importDefault(require("../util/cache/getJsonFromCachedFile"));
const cloneIntoCache_1 = __importDefault(require("../util/cache/cloneIntoCache"));
async function componentList() {
    var _a;
    const emulsifyConfig = await (0, getEmulsifyConfig_1.default)();
    if (!emulsifyConfig) {
        return (0, log_1.default)('error', 'No Emulsify project detected. You must run this command within an existing Emulsify project. For more information about creating Emulsify projects, run "emulsify init --help"', constants_1.EXIT_ERROR);
    }
    if (!emulsifyConfig.system || !emulsifyConfig.variant) {
        return (0, log_1.default)('error', 'You must select and install a system before you can list components. To see a list of out-of-the-box systems, run "emulsify system list". You can install a system by running "emulsify system install [name]"', constants_1.EXIT_ERROR);
    }
    const systemName = (0, getGitRepoNameFromUrl_1.default)(emulsifyConfig.system.repository);
    if (!systemName) {
        return (0, log_1.default)('error', `The system specified in your project configuration is not valid. Please make sure your ${constants_1.EMULSIFY_PROJECT_CONFIG_FILE} file contains a system.repository value that is a valid git url`, constants_1.EXIT_ERROR);
    }
    try {
        await (0, cloneIntoCache_1.default)('systems', [systemName])(emulsifyConfig.system);
    }
    catch (e) {
        console.log(e);
        return (0, log_1.default)('error', 'The system specified in your project configuration is not clone-able, or has an invalid checkout value.', constants_1.EXIT_ERROR);
    }
    const systemConf = await (0, getJsonFromCachedFile_1.default)('systems', [systemName], emulsifyConfig.system.checkout, constants_1.EMULSIFY_SYSTEM_CONFIG_FILE);
    if (!systemConf) {
        return (0, log_1.default)('error', `Unable to load configuration for the ${systemName} system. Please make sure the system is installed.`, constants_1.EXIT_ERROR);
    }
    const variantName = emulsifyConfig.variant.platform;
    const variantConf = (_a = systemConf.variants) === null || _a === void 0 ? void 0 : _a.find(({ platform }) => platform === variantName);
    if (!variantConf) {
        return (0, log_1.default)('error', `Unable to find configuration for the variant ${variantName} within the system ${systemName}.`, constants_1.EXIT_ERROR);
    }
    variantConf.components.map(({ name, structure }) => {
        (0, log_1.default)('info', `${structure} -> ${name}`);
    });
}
exports.default = componentList;
