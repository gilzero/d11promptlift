"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ramda_1 = __importDefault(require("ramda"));
const path_1 = require("path");
const fs_1 = require("fs");
const simple_git_1 = __importDefault(require("simple-git"));
const constants_1 = require("../lib/constants");
const getPlatformInfo_1 = __importDefault(require("../util/platform/getPlatformInfo"));
const getAvailableStarters_1 = __importDefault(require("../util/getAvailableStarters"));
const writeToJsonFile_1 = __importDefault(require("../util/fs/writeToJsonFile"));
const strToMachineName_1 = __importDefault(require("../util/strToMachineName"));
const installDependencies_1 = __importDefault(require("../util/project/installDependencies"));
const executeScript_1 = __importDefault(require("../util/fs/executeScript"));
const getInitSuccessMessageForPlatform_1 = __importDefault(require("../util/platform/getInitSuccessMessageForPlatform"));
const log_1 = __importDefault(require("../lib/log"));
const constants_2 = require("../lib/constants");
const git = (0, simple_git_1.default)();
function init(progress) {
    return async (name, targetDirectory, options) => {
        const { name: autoPlatformName, emulsifyParentDirectory } = (await (0, getPlatformInfo_1.default)()) || {};
        const platformName = ((options === null || options === void 0 ? void 0 : options.platform) || autoPlatformName);
        if (!platformName) {
            return (0, log_1.default)('error', 'Unable to determine which platform you are installing Emulsify within. Please specify a platform (such as "drupal" or "wordpress") by passing a -p or --platform flag with your init command.', constants_2.EXIT_ERROR);
        }
        progress.tick(10, {
            message: `using starter for ${platformName}, validating config`,
        });
        const machineName = (options === null || options === void 0 ? void 0 : options.machineName) || (0, strToMachineName_1.default)(name, platformName);
        const starters = (0, getAvailableStarters_1.default)();
        const starter = starters.find(ramda_1.default.propEq('platform')(platformName));
        const targetParent = targetDirectory || emulsifyParentDirectory;
        const target = targetParent ? (0, path_1.join)(targetParent, machineName) : undefined;
        const repository = (options === null || options === void 0 ? void 0 : options.starter) || (starter === null || starter === void 0 ? void 0 : starter.repository);
        const checkout = (options === null || options === void 0 ? void 0 : options.checkout) || (starter === null || starter === void 0 ? void 0 : starter.checkout);
        if (!target) {
            return (0, log_1.default)('error', 'Unable to find a directory to put Emulsify in. Please specify a directory using the "path" argument: emulsify init myTheme ./themes', constants_2.EXIT_ERROR);
        }
        if (!repository) {
            return (0, log_1.default)('error', `Unable to find an Emulsify starter for your project. Please specify one using the --starter flag: emulsify init myTheme --starter ${(0, getAvailableStarters_1.default)()[0].repository}`, constants_2.EXIT_ERROR);
        }
        if ((0, fs_1.existsSync)(target)) {
            return (0, log_1.default)('error', `The intended target is already occupied: ${target}`, constants_2.EXIT_ERROR);
        }
        try {
            progress.tick(10, { message: 'validation complete, cloning starter' });
            await git.clone(repository, target, checkout
                ? {
                    '--branch': checkout,
                }
                : {});
            await (0, writeToJsonFile_1.default)((0, path_1.join)(target, constants_1.EMULSIFY_PROJECT_CONFIG_FILE), {
                project: {
                    platform: platformName,
                    name,
                    machineName,
                },
                starter: { repository },
            });
            progress.tick(30, {
                message: 'starter cloned, installing dependencies (this will take a moment)',
            });
            await (0, installDependencies_1.default)(target);
            progress.tick(40, {
                message: 'dependencies installed, executing init script',
            });
            const initPath = (0, path_1.join)(target, constants_1.EMULSIFY_PROJECT_HOOK_FOLDER, constants_1.EMULSIFY_PROJECT_HOOK_INIT);
            if ((0, fs_1.existsSync)(initPath)) {
                await (0, executeScript_1.default)(initPath);
            }
            await fs_1.promises.rmdir((0, path_1.join)(target, '.git'), { recursive: true });
            progress.tick(10, {
                message: 'init script executed, initialization complete',
            });
            (0, log_1.default)('success', `Created an Emulsify project in ${target}.`);
            (0, getInitSuccessMessageForPlatform_1.default)(platformName, target).map(({ method, message }) => (0, log_1.default)(method, message));
        }
        catch (e) {
            (0, log_1.default)('error', `Unable to pull down ${repository}: ${String(e)}`, constants_2.EXIT_ERROR);
        }
    };
}
exports.default = init;
