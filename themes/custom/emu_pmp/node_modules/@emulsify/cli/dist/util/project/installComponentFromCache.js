"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const constants_1 = require("../../lib/constants");
const findFileInCurrentPath_1 = __importDefault(require("../fs/findFileInCurrentPath"));
const copyItemFromCache_1 = __importDefault(require("../cache/copyItemFromCache"));
async function installComponentFromCache(system, variant, componentName, force = false) {
    const path = (0, findFileInCurrentPath_1.default)(constants_1.EMULSIFY_PROJECT_CONFIG_FILE);
    if (!path) {
        throw new Error('Unable to find an Emulsify project to install the component into.');
    }
    const component = variant.components.find(({ name }) => name === componentName);
    if (!component) {
        throw new Error(`The specified component (${componentName}) does not exist within the given system variant.`);
    }
    const structure = variant.structureImplementations.find(({ name }) => name === component.structure);
    if (!structure) {
        throw new Error(`The structure (${component.structure}) specified within the component ${componentName} is invalid.`);
    }
    const destination = (0, path_1.join)((0, path_1.dirname)(path), structure.directory, component.name);
    if ((await (0, fs_extra_1.pathExists)(destination)) && !force) {
        throw new Error(`The component "${component.name}" already exists, and force was not passed (--force).`);
    }
    return (0, copyItemFromCache_1.default)('systems', [system.name, structure.directory, component.name], destination, force);
}
exports.default = installComponentFromCache;
